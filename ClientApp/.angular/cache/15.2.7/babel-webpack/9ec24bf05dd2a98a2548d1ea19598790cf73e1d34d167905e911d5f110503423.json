{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HouseService {\n  constructor(_http) {\n    this._http = _http;\n    this.baseUrl = 'api/house';\n  }\n  getHouses() {\n    return this._http.get(this.baseUrl);\n  }\n  createHouse(newHouse, email) {\n    const createUrl = 'api/house/create';\n    return this._http.post(createUrl, {\n      house: newHouse,\n      email: email\n    });\n  }\n  createDirGridImg(imgFile, address) {\n    const formData = new FormData();\n    formData.append('gridImg', imgFile);\n    formData.append('address', address);\n    const gridImgUrl = 'api/house/createDirGridImg';\n    return this._http.post(gridImgUrl, formData);\n  }\n  uploadImages(images, address) {\n    const formData = new FormData();\n    for (let i = 0; i < images.length; i++) {\n      formData.append('imageFiles', images[i]);\n    }\n    formData.append('address', address);\n    const uploadImgUrl = 'api/house/uploadImg';\n    return this._http.post(uploadImgUrl, formData);\n  }\n  getHouseById(houseId) {\n    const url = `${this.baseUrl}/${houseId}`;\n    return this._http.get(url);\n  }\n  getListings(email) {\n    const url = `${this.baseUrl}/listings/${email}`;\n    return this._http.get(url);\n  }\n  updateHouse(houseId, newHouse) {\n    const url = `${this.baseUrl}/update/${houseId}`;\n    newHouse.houseId = houseId;\n    return this._http.put(url, newHouse);\n  }\n  deleteHouse(houseId) {\n    const url = `${this.baseUrl}/delete/${houseId}`;\n    return this._http.delete(url);\n  }\n  getNumberOfFiles(address) {\n    const apiUrl = `api/house/numberOfFiles?address=${address}`;\n    return this._http.get(apiUrl);\n  }\n}\nHouseService.ɵfac = function HouseService_Factory(t) {\n  return new (t || HouseService)(i0.ɵɵinject(i1.HttpClient));\n};\nHouseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HouseService,\n  factory: HouseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,YAAY;EAIvBC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAFjB,YAAO,GAAG,WAAW;EAEY;EAEzCC,SAAS;IACP,OAAO,IAAI,CAACD,KAAK,CAACE,GAAG,CAAW,IAAI,CAACC,OAAO,CAAC;EAC/C;EAEAC,WAAW,CAACC,QAAgB,EAAEC,KAAa;IACzC,MAAMC,SAAS,GAAG,kBAAkB;IACpC,OAAO,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAMD,SAAS,EAAE;MAACE,KAAK,EAAEJ,QAAQ;MAAEC,KAAK,EAAEA;IAAK,CAAC,CAAC;EACzE;EAEAI,gBAAgB,CAACC,OAAa,EAAEC,OAAe;IAC7C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEJ,OAAO,CAAC;IACnCE,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;IAEnC,MAAMI,UAAU,GAAG,4BAA4B;IAC/C,OAAO,IAAI,CAAChB,KAAK,CAACQ,IAAI,CAAMQ,UAAU,EAAEH,QAAQ,CAAC;EACnD;EAEAI,YAAY,CAACC,MAAc,EAAEN,OAAe;IAC1C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACtCN,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEG,MAAM,CAACC,CAAC,CAAC,CAAC;;IAE1CN,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;IACnC,MAAMS,YAAY,GAAG,qBAAqB;IAC1C,OAAO,IAAI,CAACrB,KAAK,CAACQ,IAAI,CAAMa,YAAY,EAAER,QAAQ,CAAC;EACrD;EAEAS,YAAY,CAACC,OAAe;IAC1B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACrB,OAAO,IAAIoB,OAAO,EAAE;IACxC,OAAO,IAAI,CAACvB,KAAK,CAACE,GAAG,CAACsB,GAAG,CAAC;EAC5B;EAEAC,WAAW,CAACnB,KAAa;IACvB,MAAMkB,GAAG,GAAG,GAAG,IAAI,CAACrB,OAAO,aAAaG,KAAK,EAAE;IAC/C,OAAO,IAAI,CAACN,KAAK,CAACE,GAAG,CAAWsB,GAAG,CAAC;EACtC;EAEAE,WAAW,CAACH,OAAe,EAAElB,QAAa;IACxC,MAAMmB,GAAG,GAAG,GAAG,IAAI,CAACrB,OAAO,WAAWoB,OAAO,EAAE;IAC/ClB,QAAQ,CAACkB,OAAO,GAAGA,OAAO;IAC1B,OAAO,IAAI,CAACvB,KAAK,CAAC2B,GAAG,CAAMH,GAAG,EAAEnB,QAAQ,CAAC;EAC3C;EAEAuB,WAAW,CAACL,OAAe;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACrB,OAAO,WAAWoB,OAAO,EAAE;IAC/C,OAAO,IAAI,CAACvB,KAAK,CAAC6B,MAAM,CAACL,GAAG,CAAC;EAC/B;EAEAM,gBAAgB,CAAClB,OAAe;IAC9B,MAAMmB,MAAM,GAAG,mCAAmCnB,OAAO,EAAE;IAC3D,OAAO,IAAI,CAACZ,KAAK,CAACE,GAAG,CAAS6B,MAAM,CAAC;EACvC;;AA1DWjC,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAkC,SAAZlC,YAAY;EAAAmC,YAFX;AAAM","names":["HouseService","constructor","_http","getHouses","get","baseUrl","createHouse","newHouse","email","createUrl","post","house","createDirGridImg","imgFile","address","formData","FormData","append","gridImgUrl","uploadImages","images","i","length","uploadImgUrl","getHouseById","houseId","url","getListings","updateHouse","put","deleteHouse","delete","getNumberOfFiles","apiUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\danie\\WebApplikasjoner\\WebApplicationAngular\\ClientApp\\src\\app\\houses\\houses.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { IHouse } from './house';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HouseService {\r\n\r\n  private baseUrl = 'api/house';\r\n\r\n  constructor(private _http: HttpClient) { }\r\n\r\n  getHouses(): Observable<IHouse[]> {\r\n    return this._http.get<IHouse[]>(this.baseUrl);\r\n  }\r\n\r\n  createHouse(newHouse: IHouse, email: string): Observable<any> {\r\n    const createUrl = 'api/house/create';\r\n    return this._http.post<any>(createUrl, {house: newHouse, email: email});\r\n  }\r\n\r\n  createDirGridImg(imgFile: File, address: string): Observable<any> {\r\n    const formData = new FormData();\r\n    formData.append('gridImg', imgFile);\r\n    formData.append('address', address);\r\n\r\n    const gridImgUrl = 'api/house/createDirGridImg';\r\n    return this._http.post<any>(gridImgUrl, formData);\r\n  }\r\n\r\n  uploadImages(images: File[], address: string): Observable<any> {\r\n    const formData = new FormData();\r\n    for (let i = 0; i < images.length; i++) {\r\n      formData.append('imageFiles', images[i])\r\n    }\r\n    formData.append('address', address);\r\n    const uploadImgUrl = 'api/house/uploadImg';\r\n    return this._http.post<any>(uploadImgUrl, formData);\r\n  }\r\n\r\n  getHouseById(houseId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/${houseId}`;\r\n    return this._http.get(url);\r\n  }\r\n\r\n  getListings(email: string): Observable<IHouse[]> {\r\n    const url = `${this.baseUrl}/listings/${email}`;\r\n    return this._http.get<IHouse[]>(url);\r\n  }\r\n\r\n  updateHouse(houseId: number, newHouse: any): Observable<any> {\r\n    const url = `${this.baseUrl}/update/${houseId}`;\r\n    newHouse.houseId = houseId;\r\n    return this._http.put<any>(url, newHouse);\r\n  }\r\n\r\n  deleteHouse(houseId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/delete/${houseId}`;\r\n    return this._http.delete(url);\r\n  }\r\n\r\n  getNumberOfFiles(address: string): Observable<number> {\r\n    const apiUrl = `api/house/numberOfFiles?address=${address}`;\r\n    return this._http.get<number>(apiUrl);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}