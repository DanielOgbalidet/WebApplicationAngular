{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HouseService {\n  constructor(_http) {\n    this._http = _http;\n    this.baseUrl = 'api/house';\n  }\n  getHouses() {\n    return this._http.get(this.baseUrl);\n  }\n  createHouse(newHouse) {\n    const createUrl = 'api/house/create';\n    return this._http.post(createUrl, newHouse);\n  }\n  createDirGridImg(imgFile, address) {\n    const formData = new FormData();\n    formData.append('gridImg', imgFile);\n    formData.append('address', address);\n    const gridImgUrl = 'api/house/createDirGridImg';\n    return this._http.post(gridImgUrl, formData);\n  }\n  uploadImages(images, address) {\n    const formData = new FormData();\n    for (let i = 0; i < images.length; i++) {\n      formData.append('imageFiles', images[i]);\n    }\n    formData.append('address', address);\n    const uploadImgUrl = 'api/house/uploadImg';\n    return this._http.post(uploadImgUrl, formData);\n  }\n  getHouseById(houseId) {\n    const url = `${this.baseUrl}/${houseId}`;\n    return this._http.get(url);\n  }\n  getListings(userId) {\n    const url = `${this.baseUrl}/listings/${userId}`;\n    return this._http.get(url);\n  }\n  updateHouse(houseId, newHouse) {\n    const url = `${this.baseUrl}/update/${houseId}`;\n    newHouse.houseId = houseId;\n    return this._http.put(url, newHouse);\n  }\n  deleteHouse(houseId) {\n    const url = `${this.baseUrl}/delete/${houseId}`;\n    return this._http.delete(url);\n  }\n  getNumberOfFiles(address) {\n    const apiUrl = `api/house/numberOfFiles?address=${address}`;\n    return this.http.get(apiUrl);\n  }\n}\nHouseService.ɵfac = function HouseService_Factory(t) {\n  return new (t || HouseService)(i0.ɵɵinject(i1.HttpClient));\n};\nHouseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HouseService,\n  factory: HouseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,YAAY;EAIvBC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAFjB,YAAO,GAAG,WAAW;EAEY;EAEzCC,SAAS;IACP,OAAO,IAAI,CAACD,KAAK,CAACE,GAAG,CAAW,IAAI,CAACC,OAAO,CAAC;EAC/C;EAEAC,WAAW,CAACC,QAAgB;IAC1B,MAAMC,SAAS,GAAG,kBAAkB;IACpC,OAAO,IAAI,CAACN,KAAK,CAACO,IAAI,CAAMD,SAAS,EAAED,QAAQ,CAAC;EAClD;EAEAG,gBAAgB,CAACC,OAAa,EAAEC,OAAe;IAC7C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEJ,OAAO,CAAC;IACnCE,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;IAEnC,MAAMI,UAAU,GAAG,4BAA4B;IAC/C,OAAO,IAAI,CAACd,KAAK,CAACO,IAAI,CAAMO,UAAU,EAAEH,QAAQ,CAAC;EACnD;EAEAI,YAAY,CAACC,MAAc,EAAEN,OAAe;IAC1C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACtCN,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEG,MAAM,CAACC,CAAC,CAAC,CAAC;;IAE1CN,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;IACnC,MAAMS,YAAY,GAAG,qBAAqB;IAC1C,OAAO,IAAI,CAACnB,KAAK,CAACO,IAAI,CAAMY,YAAY,EAAER,QAAQ,CAAC;EACrD;EAEAS,YAAY,CAACC,OAAe;IAC1B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACnB,OAAO,IAAIkB,OAAO,EAAE;IACxC,OAAO,IAAI,CAACrB,KAAK,CAACE,GAAG,CAACoB,GAAG,CAAC;EAC5B;EAEAC,WAAW,CAACC,MAAc;IACxB,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACnB,OAAO,aAAaqB,MAAM,EAAE;IAChD,OAAO,IAAI,CAACxB,KAAK,CAACE,GAAG,CAAWoB,GAAG,CAAC;EACtC;EAEAG,WAAW,CAACJ,OAAe,EAAEhB,QAAa;IACxC,MAAMiB,GAAG,GAAG,GAAG,IAAI,CAACnB,OAAO,WAAWkB,OAAO,EAAE;IAC/ChB,QAAQ,CAACgB,OAAO,GAAGA,OAAO;IAC1B,OAAO,IAAI,CAACrB,KAAK,CAAC0B,GAAG,CAAMJ,GAAG,EAAEjB,QAAQ,CAAC;EAC3C;EAEAsB,WAAW,CAACN,OAAe;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACnB,OAAO,WAAWkB,OAAO,EAAE;IAC/C,OAAO,IAAI,CAACrB,KAAK,CAAC4B,MAAM,CAACN,GAAG,CAAC;EAC/B;EAEAO,gBAAgB,CAACnB,OAAe;IAC9B,MAAMoB,MAAM,GAAG,mCAAmCpB,OAAO,EAAE;IAC3D,OAAO,IAAI,CAACqB,IAAI,CAAC7B,GAAG,CAAS4B,MAAM,CAAC;EACtC;;AA1DWhC,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAkC,SAAZlC,YAAY;EAAAmC,YAFX;AAAM","names":["HouseService","constructor","_http","getHouses","get","baseUrl","createHouse","newHouse","createUrl","post","createDirGridImg","imgFile","address","formData","FormData","append","gridImgUrl","uploadImages","images","i","length","uploadImgUrl","getHouseById","houseId","url","getListings","userId","updateHouse","put","deleteHouse","delete","getNumberOfFiles","apiUrl","http","factory","providedIn"],"sourceRoot":"","sources":["/Users/Hjemmebruker/Desktop/WebApplicationAngular/ClientApp/src/app/houses/houses.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IHouse } from './house';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HouseService {\n\n  private baseUrl = 'api/house';\n\n  constructor(private _http: HttpClient) { }\n\n  getHouses(): Observable<IHouse[]> {\n    return this._http.get<IHouse[]>(this.baseUrl);\n  }\n\n  createHouse(newHouse: IHouse): Observable<any> {\n    const createUrl = 'api/house/create';\n    return this._http.post<any>(createUrl, newHouse);\n  }\n\n  createDirGridImg(imgFile: File, address: string): Observable<any> {\n    const formData = new FormData();\n    formData.append('gridImg', imgFile);\n    formData.append('address', address);\n\n    const gridImgUrl = 'api/house/createDirGridImg';\n    return this._http.post<any>(gridImgUrl, formData);\n  }\n\n  uploadImages(images: File[], address: string): Observable<any> {\n    const formData = new FormData();\n    for (let i = 0; i < images.length; i++) {\n      formData.append('imageFiles', images[i])\n    }\n    formData.append('address', address);\n    const uploadImgUrl = 'api/house/uploadImg';\n    return this._http.post<any>(uploadImgUrl, formData);\n  }\n\n  getHouseById(houseId: number): Observable<any> {\n    const url = `${this.baseUrl}/${houseId}`;\n    return this._http.get(url);\n  }\n\n  getListings(userId: number): Observable<IHouse[]> {\n    const url = `${this.baseUrl}/listings/${userId}`;\n    return this._http.get<IHouse[]>(url);\n  }\n\n  updateHouse(houseId: number, newHouse: any): Observable<any> {\n    const url = `${this.baseUrl}/update/${houseId}`;\n    newHouse.houseId = houseId;\n    return this._http.put<any>(url, newHouse);\n  }\n\n  deleteHouse(houseId: number): Observable<any> {\n    const url = `${this.baseUrl}/delete/${houseId}`;\n    return this._http.delete(url);\n  }\n\n  getNumberOfFiles(address: string): Observable<number> {\n    const apiUrl = `api/house/numberOfFiles?address=${address}`;\n    return this.http.get<number>(apiUrl);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}